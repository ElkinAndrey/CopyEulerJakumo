// <auto-generated />
using System;
using EulerJakumo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EulerJakumo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221218192414_ApplicationMigration")]
    partial class ApplicationMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EulerJakumo.Data.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LinkOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("EulerJakumo.Data.TextDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextStyle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("TextDesign");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EulerJakumo.Models.AboutProduct", b =>
                {
                    b.HasBaseType("EulerJakumo.Data.TextDesign");

                    b.ToTable("AboutProduct");
                });

            modelBuilder.Entity("EulerJakumo.Models.Feedback", b =>
                {
                    b.HasBaseType("EulerJakumo.Data.TextDesign");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("EulerJakumo.Data.TextDesign", b =>
                {
                    b.HasOne("EulerJakumo.Data.Problem", null)
                        .WithMany("Text")
                        .HasForeignKey("ProblemId");
                });

            modelBuilder.Entity("EulerJakumo.Models.AboutProduct", b =>
                {
                    b.HasOne("EulerJakumo.Data.TextDesign", null)
                        .WithOne()
                        .HasForeignKey("EulerJakumo.Models.AboutProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EulerJakumo.Models.Feedback", b =>
                {
                    b.HasOne("EulerJakumo.Data.TextDesign", null)
                        .WithOne()
                        .HasForeignKey("EulerJakumo.Models.Feedback", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EulerJakumo.Data.Problem", b =>
                {
                    b.Navigation("Text");
                });
#pragma warning restore 612, 618
        }
    }
}
